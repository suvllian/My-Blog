<?php define( 'OPTIONS_FRAMEWORK_DIRECTORY', get_template_directory_uri() . '/inc/' );require_once dirname( __FILE__ ) . '/inc/options-framework.php';$optionsfile = locate_template( 'options.php' );load_template( $optionsfile );function remove_open_sans() {	wp_deregister_style( 'open-sans' );	wp_register_style( 'open-sans', false );	wp_enqueue_style('open-sans','');}add_action( 'init', 'remove_open_sans' );require get_template_directory() . '/inc/postviews.php';require get_template_directory() . '/inc/widget-hot.php';function hide_admin_bar($flag) {return false;}add_filter('show_admin_bar','hide_admin_bar');add_filter( 'pre_option_link_manager_enabled', '__return_true' );add_filter('rest_enabled', '__return_false');add_filter('rest_jsonp_enabled', '__return_false');remove_action( 'wp_head', 'rest_output_link_wp_head', 10 );remove_action( 'wp_head', 'wp_oembed_add_discovery_links', 10 );remove_filter( 'the_content', array( $GLOBALS['wp_embed'], 'autoembed' ), 8 );remove_action('wp_head', 'wp_shortlink_wp_head', 10, 0 );remove_action( 'wp_head', 'feed_links_extra', 3 ); remove_action('wp_head', 'wlwmanifest_link');remove_action( 'wp_head', 'index_rel_link' ); remove_action('wp_head', 'rsd_link');remove_action('wp_head', 'wp_generator');remove_action('wp_head', 'print_emoji_detection_script', 7 );remove_action('admin_print_scripts','print_emoji_detection_script');remove_action('wp_print_styles', 'print_emoji_styles');remove_action('admin_print_styles', 'print_emoji_styles');function add_editor_buttons($buttons) {	$buttons[] = 'fontselect';		$buttons[] = 'fontsizeselect';	$buttons[] = 'cleanup';	$buttons[] = 'styleselect';			$buttons[] = 'sub';	$buttons[] = 'sup';	$buttons[] = 'copy';	$buttons[] = 'paste';	$buttons[] = 'cut';	$buttons[] = 'image';	$buttons[] = 'anchor';	$buttons[] = 'backcolor';	$buttons[] = 'wp_page';		return $buttons;}add_filter("mce_buttons_3", "add_editor_buttons");register_nav_menus(array('header-menu' => __( '<strong>顶部导航菜单</strong>' )));function get_category_root_id($cat){	$this_category = get_category($cat);	while($this_category->category_parent){		$this_category = get_category($this_category->category_parent);	}	return $this_category->term_id;}function rename_filename($filename) {	$info = pathinfo($filename);	$ext = empty($info['extension']) ? '' : '.' . $info['extension'];	$name = basename($filename, $ext);	return substr(md5($name), 0, 20) . $ext;}add_filter('sanitize_file_name', 'rename_filename', 10);if( function_exists('register_sidebar') ) {	register_sidebars(1,array(		'name' => '侧栏小工具',		'id' => 'sidebar',		'description'   => '',		'before_widget' => '<div class="sidebar-widget">',		'after_widget' => '</div>',		'before_title' => '<h3 class="sidebar-title">',		'after_title' => '</h3>'	));}function get_category_tags($args) {	global $wpdb;	$tags = $wpdb->get_results		("            SELECT DISTINCT terms2.term_id as tag_id, terms2.name as tag_name            FROM                $wpdb->posts as p1                LEFT JOIN $wpdb->term_relationships as r1 ON p1.ID = r1.object_ID                LEFT JOIN $wpdb->term_taxonomy as t1 ON r1.term_taxonomy_id = t1.term_taxonomy_id                LEFT JOIN $wpdb->terms as terms1 ON t1.term_id = terms1.term_id,                $wpdb->posts as p2                LEFT JOIN $wpdb->term_relationships as r2 ON p2.ID = r2.object_ID                LEFT JOIN $wpdb->term_taxonomy as t2 ON r2.term_taxonomy_id = t2.term_taxonomy_id                LEFT JOIN $wpdb->terms as terms2 ON t2.term_id = terms2.term_id            WHERE                t1.taxonomy = 'category' AND p1.post_status = 'publish' AND terms1.term_id IN (".$args['categories'].") AND                t2.taxonomy = 'post_tag' AND p2.post_status = 'publish'                AND p1.ID = p2.ID            ORDER by tag_name			LIMIT 5        ");        $count = 0;        if($tags) {			foreach ($tags as $tag) {				$mytag[$count] = get_term_by('id', $tag->tag_id, 'post_tag');				$count++;			}        }        else {			$mytag = NULL;        }               return $mytag;}function catch_that_image() {	global $post, $posts;	$first_img = '';	ob_start();	ob_end_clean();	$output = preg_match_all('/<img.+src=[\'"]([^\'"]+)[\'"].*>/i', $post->post_content, $matches);	$first_img = $matches [1] [0];	if(empty($first_img)){		$site_url = get_bloginfo('template_directory');        $first_img = "$site_url/images/no-image.jpg";	}	return $first_img;}function get_breadcrumbs(){    global $wp_query; 	if(is_home()) {		echo '<a href="'. get_option('home') .'" title="网站首页">'. get_bloginfo('name') .'首页</a>';			}    if ( !is_home() ){        echo '<a href="'. get_option('home') .'" title="网站首页">首页</a>';        if ( is_category() )        {            $catTitle = single_cat_title( "", false );            $cat = get_cat_ID( $catTitle );            echo " <i>/</i> ". get_category_parents( $cat, TRUE, " <i>/</i> " );        }elseif(is_tag()){			echo " <i>/</i> ";			single_tag_title();		}        elseif ( is_archive())        {            echo " <i>/</i> ";			wp_title('',true);        }        elseif ( is_search() ) {             echo " <i>/</i> 搜索结果";        }        elseif ( is_404() )        {            echo " <i>/</i> 404页面不存在";        }        elseif ( is_single() )        {			if(get_post_type() == 'designer'){				$post_type = get_post_type_object(get_post_type());				echo ' <i>/</i> '. $post_type->labels->singular_name;			}else{				$category = get_the_category();				$category_id = get_cat_ID( $category[0]->cat_name );				echo ' <i>/</i> '. get_category_parents( $category_id, TRUE, " <i>/</i> " );   			}			        }        elseif ( is_page() )        {            $post = $wp_query->get_queried_object();            if ( $post->post_parent == 0 ){                echo " <i>/</i> ".the_title('','', FALSE);            } else {                $title = the_title('','', FALSE);                $ancestors = array_reverse( get_post_ancestors( $post->ID ) );                array_push($ancestors, $post->ID);                foreach ( $ancestors as $ancestor ){                    if( $ancestor != end($ancestors) ){                        echo ' <i>/</i> <a href="'. get_permalink($ancestor) .'">'. strip_tags( apply_filters( 'single_post_title', get_the_title( $ancestor ) ) ) .'</a>';                    } else {                        echo ' <i>/</i> '. strip_tags( apply_filters( 'single_post_title', get_the_title( $ancestor ) ) );                    }                }            }        }else{			echo " <i>/</i> ";			wp_title('',true);		}           }}function tagtext(){	global $post;	$gettags = get_the_tags($post->ID);	if ($gettags) {		foreach ($gettags as $tag) {		$posttag[] = $tag->name;	}	$tags = implode( ',', $posttag );		return $tags;	}}function leonhere_pagenavi($range = 9){	global $paged, $wp_query, $max_page;	if ( !$max_page ) {$max_page = $wp_query->max_num_pages;}	if($max_page > 1){if(!$paged){$paged = 1;}	if($paged != 1){echo "<a href='" . get_pagenum_link(1) . "' class='extend' title='跳转到首页'> 首页 </a>";}	    if($max_page > $range){		if($paged < $range){for($i = 1; $i <= ($range + 1); $i++){echo "<a href='" . get_pagenum_link($i) ."'";		if($i==$paged)echo " class='current'";echo ">$i</a>";}}    elseif($paged >= ($max_page - ceil(($range/2)))){		for($i = $max_page - $range; $i <= $max_page; $i++){echo "<a href='" . get_pagenum_link($i) ."'";		if($i==$paged)echo " class='current'";echo ">$i</a>";}}	elseif($paged >= $range && $paged < ($max_page - ceil(($range/2)))){		for($i = ($paged - ceil($range/2)); $i <= ($paged + ceil(($range/2))); $i++){echo "<a href='" . get_pagenum_link($i) ."'";if($i==$paged) echo " class='current'";echo ">$i</a>";}}}    else{for($i = 1; $i <= $max_page; $i++){echo "<a href='" . get_pagenum_link($i) ."'";    if($i==$paged)echo " class='current'";echo ">$i</a>";}}	    if($paged != $max_page){echo "<a href='" . get_pagenum_link($max_page) . "' class='extend' title='跳转到最后一页'> 末页 </a>";}}}function copyrightDate() {	global $wpdb;	$copyright_dates = $wpdb->get_results("		SELECT			YEAR(min(post_date_gmt)) AS firstdate,			YEAR(max(post_date_gmt)) AS lastdate		FROM			$wpdb->posts		WHERE post_status = 'publish'	");	if($copyright_dates) {		$date = date('Y-m-d');		$date = explode('-', $date);		$copyright = "Copyright &copy; " . $copyright_dates[0]->firstdate;		if($copyright_dates[0]->firstdate != $date[0]) {			$copyright .= '-' . $date[0];		}		echo $copyright;	}}function disable_embeds_init() {    /* @var WP $wp */    global $wp;    // Remove the embed query var.    $wp->public_query_vars = array_diff( $wp->public_query_vars, array(        'embed',    ) );    // Remove the REST API endpoint.    remove_action( 'rest_api_init', 'wp_oembed_register_route' );    // Turn off    add_filter( 'embed_oembed_discover', '__return_false' );    // Don't filter oEmbed results.    remove_filter( 'oembed_dataparse', 'wp_filter_oembed_result', 10 );    // Remove oEmbed discovery links.    remove_action( 'wp_head', 'wp_oembed_add_discovery_links' );    // Remove oEmbed-specific JavaScript from the front-end and back-end.    remove_action( 'wp_head', 'wp_oembed_add_host_js' );    add_filter( 'tiny_mce_plugins', 'disable_embeds_tiny_mce_plugin' );    // Remove all embeds rewrite rules.    add_filter( 'rewrite_rules_array', 'disable_embeds_rewrites' );}add_action( 'init', 'disable_embeds_init', 9999 );/** * Removes the 'wpembed' TinyMCE plugin. * * @since 1.0.0 * * @param array $plugins List of TinyMCE plugins. * @return array The modified list. */function disable_embeds_tiny_mce_plugin( $plugins ) {    return array_diff( $plugins, array( 'wpembed' ) );}/** * Remove all rewrite rules related to embeds. * * @since 1.2.0 * * @param array $rules WordPress rewrite rules. * @return array Rewrite rules without embeds rules. */function disable_embeds_rewrites( $rules ) {    foreach ( $rules as $rule => $rewrite ) {        if ( false !== strpos( $rewrite, 'embed=true' ) ) {            unset( $rules[ $rule ] );        }    }    return $rules;}/** * Remove embeds rewrite rules on plugin activation. * * @since 1.2.0 */function disable_embeds_remove_rewrite_rules() {    add_filter( 'rewrite_rules_array', 'disable_embeds_rewrites' );    flush_rewrite_rules();}register_activation_hook( __FILE__, 'disable_embeds_remove_rewrite_rules' );/** * Flush rewrite rules on plugin deactivation. * * @since 1.2.0 */function disable_embeds_flush_rewrite_rules() {    remove_filter( 'rewrite_rules_array', 'disable_embeds_rewrites' );    flush_rewrite_rules();}register_deactivation_hook( __FILE__, 'disable_embeds_flush_rewrite_rules' );function boke8_comment($comment, $args, $depth){   $GLOBALS['comment'] = $comment; ?><li id="comment-<?php comment_ID(); ?>">	<div class="cmt_wrap">		<div class="gravatar">			<?php if (function_exists('get_avatar') && get_option('show_avatars')) { echo get_avatar($comment,50); } ?>		</div>		<div class="cmt_info">			<div class="cmt_meta">				<span class="cmt_user"><a rel="nofollow" href="<?php comment_author_url() ?>" target="_blank"><?php comment_author() ?></a></span>				<span class="reply">					<?php comment_reply_link(array_merge( $args, array('reply_text' => '回复','depth' => $depth, 'max_depth' => $args['max_depth']))) ?>				</span>				<span class="cmt_date"><?php echo get_comment_time('Y-m-d'); ?></span>									</div>			<div class="cmt_cont">				<?php if($comment->comment_approved =='0') : ?>				<em>你的评论正在审核，稍后会显示出来！</em>				<?php endif;?>				<?php comment_text(); ?>			</div>		</div>	</div><?php }?>